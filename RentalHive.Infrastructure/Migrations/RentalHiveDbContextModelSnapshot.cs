// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentalHive.Infrastructure.Persistence.DatabaseContext;

#nullable disable

namespace RentalHive.Infrastructure.Migrations
{
    [DbContext(typeof(RentalHiveDbContext))]
    partial class RentalHiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentalHive.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RentalItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RenterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("RentalItemId");

                    b.HasIndex("RenterId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.RentalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<List<string>>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("RentalItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RentalItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PersonalIdentityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PersonalIdentityNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Boat", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.RentalItem");

                    b.Property<string>("BoatType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("LengthInFeet")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Boat");
                });

            modelBuilder.Entity("Machine", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.RentalItem");

                    b.Property<int>("Horsepower")
                        .HasColumnType("integer");

                    b.Property<string>("MachineType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("Machine");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.Car", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.RentalItem");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("integer");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Car");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.Trailer", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.RentalItem");

                    b.Property<double>("DeckLengthInMeters")
                        .HasColumnType("double precision");

                    b.Property<double>("DeckWidthInMeters")
                        .HasColumnType("double precision");

                    b.Property<bool>("HasBrakes")
                        .HasColumnType("boolean");

                    b.Property<double>("LoadCapacityInKg")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("Trailer");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.LightTruck", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.Car");

                    b.Property<bool>("HasTailLift")
                        .HasColumnType("boolean");

                    b.Property<double>("PayloadCapacityInKg")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("LightTruck");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.Minibus", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.Car");

                    b.Property<bool>("IsWheelchairAccessible")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Minibus");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.Van", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.Car");

                    b.Property<bool>("HasSlidingDoor")
                        .HasColumnType("boolean");

                    b.Property<double>("LoadCapacityInCubicMeters")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("Van");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.BoatTrailer", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.Trailer");

                    b.Property<bool>("IsSubmersible")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxBoatLengthInFeet")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BoatTrailer");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.CarTransporter", b =>
                {
                    b.HasBaseType("RentalHive.Domain.Entities.Trailer");

                    b.Property<bool>("HasWinch")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfAxles")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CarTransporter");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.Booking", b =>
                {
                    b.HasOne("RentalHive.Domain.Entities.RentalItem", "RentalItem")
                        .WithMany("Bookings")
                        .HasForeignKey("RentalItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RentalHive.Domain.Entities.User", "Renter")
                        .WithMany("Bookings")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RentalItem");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.RentalItem", b =>
                {
                    b.HasOne("RentalHive.Domain.Entities.User", "Owner")
                        .WithMany("OwnedItems")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.RentalItem", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RentalHive.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OwnedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
