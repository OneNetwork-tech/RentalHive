@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http

<div class="bg-gray-50 text-gray-800">

    <!-- Hero Section -->
    <div class="relative bg-gray-800 text-white">
        <div class="absolute inset-0">
            <img src="https://images.unsplash.com/photo-1568605117036-5fe5e7167b4f?q=80&w=2070&auto=format&fit=crop"
                 alt="Modern car"
                 class="w-full h-full object-cover opacity-40">
        </div>
        <div class="relative container mx-auto px-4 py-24 md:py-32 text-center">
            <h1 class="text-4xl md:text-6xl font-bold leading-tight mb-4">Rent Anything, Anytime</h1>
            <p class="text-lg md:text-xl text-gray-300 mb-8">The best platform to rent cars, boats, and machinery with ease and confidence.</p>
            <!-- Search Bar -->
        </div>
    </div>

    <!-- Categories Section -->
    <div class="py-16">
        <!-- Category content here -->
    </div>

    <!-- Featured Listings Section -->
    <div class="bg-gray-100 py-16">
        <div class="container mx-auto px-4">
            <h2 class="text-3xl font-bold text-center mb-12">Featured Rentals</h2>

            @if (isLoading)
            {
                <p class="text-center text-gray-600"><em>Loading featured rentals...</em></p>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-center text-red-600"><em>@errorMessage</em></p>
            }
            else if (featuredItems.Any())
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    @foreach (var item in featuredItems)
                    {
                        <div class="bg-white rounded-lg shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300">
                            <img src="https://placehold.co/600x400/334155/ffffff?text=@(Uri.EscapeDataString(item.Name))" alt="@item.Name" class="w-full h-56 object-cover">
                            <div class="p-6">
                                <h3 class="text-xl font-bold mb-2">@item.Name</h3>
                                <div class="text-gray-600 mb-4 text-sm">
                                    @switch (item.Discriminator)
                                    {
                                        case "Car":
                                        case "Van":
                                        case "Minibus":
                                        case "LightTruck":
                                            <span>@item.Make @item.Model (@item.Year)</span>
                                            break;
                                        case "Boat":
                                            <span>@item.BoatType, @item.LengthInFeet ft</span>
                                            break;
                                        case "Machine":
                                            <span>@item.MachineType</span>
                                            break;
                                        default:
                                            <span class="italic">General Item</span>
                                            break;
                                    }
                                </div>
                                <p class="text-gray-700 mb-4 h-12 overflow-hidden">@item.Description</p>
                                <div class="flex justify-between items-center">
                                    <p class="text-lg font-bold text-indigo-600">@item.DailyRate.ToString("C", new System.Globalization.CultureInfo("sv-SE"))/day</p>
                                    <a href="/details/@item.Id" class="bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full font-semibold text-sm hover:bg-indigo-200 transition">View Details</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-center text-gray-600"><em>No rental items have been added yet. Be the first!</em></p>
            }
        </div>
    </div>
</div>

@code {
    private List<RentalItemViewModel> featuredItems = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiUrl = "http://localhost:7105/api/RentalItems"; // Ensure port is correct

            // Fetch the raw JSON to handle polymorphism
            var response = await Http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                var jsonString = await response.Content.ReadAsStringAsync();

                // The default serializer for TPH includes a "$discriminator" property
                // which we can use to deserialize into the correct type.
                // For simplicity, we'll use a generic view model.
                featuredItems = JsonSerializer.Deserialize<List<RentalItemViewModel>>(jsonString, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    }) ?? new List<RentalItemViewModel>();
            }
            else
            {
                errorMessage = $"Error fetching data: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// A view model to represent any type of rental item from the API.
    /// It includes all possible properties.
    /// </summary>
    public class RentalItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal DailyRate { get; set; }
        public int OwnerId { get; set; }

        // This property captures the entity type from the JSON
        public string Discriminator { get; set; }

        // Car properties
        public string? Make { get; set; }
        public string? Model { get; set; }
        public int? Year { get; set; }

        // Boat properties
        public string? BoatType { get; set; }
        public int? LengthInFeet { get; set; }

        // Machine properties
        public string? MachineType { get; set; }
    }
}
